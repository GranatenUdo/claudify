{
  "description": "Template variable definitions and extraction logic",
  "version": "1.0.0",
  "variables": {
    "PROJECT_NAME": {
      "description": "Project name",
      "extraction": "package.json:name or *.csproj:AssemblyName",
      "default": "Vineyard Management"
    },
    "PROJECT_DESCRIPTION": {
      "description": "Project description",
      "extraction": "package.json:description or README.md:first-paragraph",
      "default": "Multi-tenant vineyard management SaaS platform"
    },
    "API_BASE_URL": {
      "description": "API base URL",
      "extraction": "appsettings.json:ApiUrl or environment:API_URL",
      "default": "https://api.vineyard.local"
    },
    "API_VERSION": {
      "description": "API version",
      "extraction": "*.csproj:Version or package.json:version",
      "default": "v1"
    },
    "API_PORT": {
      "description": "API port number",
      "extraction": "launchSettings.json:applicationUrl",
      "default": "7028"
    },
    "FRONTEND_PORT": {
      "description": "Frontend port number",
      "extraction": "angular.json:serve:options:port",
      "default": "4200"
    },
    "AUTH_METHOD": {
      "description": "Authentication method",
      "extraction": "appsettings.json:Authentication:Type",
      "default": "JWT Bearer Token",
      "options": ["JWT Bearer Token", "OAuth 2.0", "API Key", "Basic Auth"]
    },
    "MULTI_TENANT": {
      "description": "Is multi-tenant system",
      "extraction": "CLAUDE.md contains 'multi-tenant'",
      "default": true,
      "type": "boolean"
    },
    "TENANT_FIELD": {
      "description": "Tenant identifier field",
      "extraction": "IOrganizationScoped interface property",
      "default": "OrganizationId"
    },
    "PRIMARY_DB": {
      "description": "Primary database type",
      "extraction": "*.csproj contains SqlServer or Npgsql",
      "default": "SQL Server",
      "options": ["SQL Server", "PostgreSQL", "MySQL", "MongoDB"]
    },
    "CACHE_TECH": {
      "description": "Caching technology",
      "extraction": "Startup.cs or Program.cs contains AddMemoryCache",
      "default": "IMemoryCache"
    },
    "BACKEND_TECH": {
      "description": "Backend technology",
      "extraction": "*.csproj:TargetFramework",
      "default": ".NET 9"
    },
    "FRONTEND_TECH": {
      "description": "Frontend framework",
      "extraction": "package.json:dependencies:@angular/core",
      "default": "Angular 19"
    },
    "REPOSITORY_PATTERN": {
      "description": "Uses repository pattern",
      "extraction": "files matching *Repository.cs exist",
      "default": true,
      "type": "boolean"
    },
    "RESULT_PATTERN": {
      "description": "Uses Result<T> pattern",
      "extraction": "Result<T> class exists",
      "default": true,
      "type": "boolean"
    },
    "DEPLOYMENT_MODEL": {
      "description": "Deployment model",
      "extraction": "docker-compose.yml or azure-pipelines.yml exists",
      "default": "Cloud (Azure)",
      "options": ["Cloud (Azure)", "Cloud (AWS)", "On-Premise", "Hybrid"]
    },
    "RATE_LIMIT_AUTHENTICATED": {
      "description": "Rate limit for authenticated requests",
      "extraction": "appsettings.json:RateLimiting:Authenticated",
      "default": "1000"
    },
    "RATE_LIMIT_WINDOW": {
      "description": "Rate limiting window",
      "extraction": "appsettings.json:RateLimiting:Window",
      "default": "hour"
    }
  },
  "conditionals": {
    "IF_MULTI_TENANT": {
      "condition": "MULTI_TENANT === true",
      "description": "Include multi-tenant specific sections"
    },
    "IF_AUTH_JWT": {
      "condition": "AUTH_METHOD === 'JWT Bearer Token'",
      "description": "Include JWT authentication sections"
    },
    "IF_AUTH_OAUTH": {
      "condition": "AUTH_METHOD === 'OAuth 2.0'",
      "description": "Include OAuth sections"
    },
    "IF_REPOSITORY_PATTERN": {
      "condition": "REPOSITORY_PATTERN === true",
      "description": "Include repository pattern documentation"
    },
    "IF_RESULT_PATTERN": {
      "condition": "RESULT_PATTERN === true",
      "description": "Include Result<T> pattern documentation"
    },
    "IF_DOTNET": {
      "condition": "BACKEND_TECH.includes('.NET')",
      "description": "Include .NET specific instructions"
    },
    "IF_NODEJS": {
      "condition": "FRONTEND_TECH.includes('Angular') || FRONTEND_TECH.includes('React')",
      "description": "Include Node.js instructions"
    },
    "IF_CACHE": {
      "condition": "CACHE_TECH !== null",
      "description": "Include caching documentation"
    }
  },
  "loops": {
    "FOREACH_CONTROLLER": {
      "description": "Iterate over all API controllers",
      "extraction": "Find all *Controller.cs files"
    },
    "FOREACH_ENDPOINT": {
      "description": "Iterate over controller endpoints",
      "extraction": "Find all [Http*] decorated methods"
    },
    "FOREACH_MODEL": {
      "description": "Iterate over DTOs/Models",
      "extraction": "Find all *Dto.cs files"
    },
    "FOREACH_PREREQUISITE": {
      "description": "List prerequisites",
      "items": [
        {
          "PREREQ_NAME": ".NET SDK",
          "PREREQ_VERSION": "9.0+",
          "PREREQ_PURPOSE": "Backend development",
          "PREREQ_INSTALL_COMMAND": "winget install Microsoft.DotNet.SDK.9"
        },
        {
          "PREREQ_NAME": "Node.js",
          "PREREQ_VERSION": "20.x LTS",
          "PREREQ_PURPOSE": "Frontend development",
          "PREREQ_INSTALL_COMMAND": "winget install OpenJS.NodeJS.LTS"
        },
        {
          "PREREQ_NAME": "SQL Server",
          "PREREQ_VERSION": "2019+",
          "PREREQ_PURPOSE": "Database",
          "PREREQ_INSTALL_COMMAND": "docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=YourStrong@Passw0rd' -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest"
        }
      ]
    }
  },
  "extraction_methods": {
    "json_path": {
      "description": "Extract from JSON file using path notation",
      "example": "package.json:scripts.test"
    },
    "xml_path": {
      "description": "Extract from XML/csproj using XPath",
      "example": "*.csproj://Version"
    },
    "regex_match": {
      "description": "Extract using regex pattern",
      "example": "pattern: 'version:\\s*\"([^\"]+)\"'"
    },
    "file_exists": {
      "description": "Check if file/pattern exists",
      "example": "exists: '*Repository.cs'"
    },
    "grep_count": {
      "description": "Count occurrences",
      "example": "count: 'Result<T>' in '*.cs'"
    }
  },
  "troubleshooting_variables": {
    "HEALTH_CHECK_COMMAND": "dotnet run health-check",
    "VIEW_LOGS_COMMAND": "tail -f logs/app.log",
    "DB_CHECK_COMMAND": "dotnet ef database validate",
    "API_CHECK_COMMAND": "curl http://localhost:7028/api/health",
    "CHECK_CONFIG_COMMAND": "cat appsettings.json | jq .",
    "CHECK_ENV_COMMAND": "printenv | grep -E 'AUTH|DB|API'",
    "CHECK_PORT_COMMAND": "netstat -tulpn | grep :7028",
    "DEFAULT_PORT": "7028",
    "CLEAR_CACHE_COMMAND": "rm -rf obj bin node_modules/.cache",
    "REBUILD_COMMAND": "dotnet build && npm run build",
    "UPDATE_DEPS_COMMAND": "dotnet restore && npm update",
    "JWT_DECODE_COMMAND": "echo $TOKEN | jwt decode -",
    "CHECK_AUTH_SERVICE": "curl https://dev-ky7lgj5mtec62rrs.eu.auth0.com/.well-known/jwks.json",
    "TIME_SYNC_COMMAND": "ntpdate -q time.nist.gov",
    "AUTH_PROVIDER": "Auth0",
    "TOKEN_EXPIRY": "1 hour",
    "TENANT_FIELD": "OrganizationId",
    "TENANT_CLAIM": "org_id",
    "API_PERF_COMMAND": "dotnet trace collect --process-id $(pidof dotnet)",
    "DB_PERF_COMMAND": "SELECT * FROM sys.dm_exec_query_stats ORDER BY total_elapsed_time DESC",
    "RESOURCE_USAGE_COMMAND": "docker stats",
    "CODE_LANGUAGE": "csharp",
    "CONFIG_LANGUAGE": "json",
    "N_PLUS_ONE_DETECTION": "// Look for loops with async database calls\nforeach (var item in items)\n{\n    var related = await _context.Related.Where(r => r.ItemId == item.Id).ToListAsync();\n}",
    "N_PLUS_ONE_SOLUTION": "// Use Include to eagerly load\nvar items = await _context.Items\n    .Include(i => i.Related)\n    .ToListAsync();",
    "MISSING_INDEX_QUERY": "SELECT * FROM sys.dm_db_missing_index_details",
    "CREATE_INDEX_EXAMPLE": "CREATE INDEX IX_Fields_OrganizationId ON Fields(OrganizationId)",
    "MEMORY_LEAK_DETECTION": "dotnet-counters monitor --process-id $(pidof dotnet)",
    "BUNDLE_ANALYZE_COMMAND": "npm run build -- --stats-json && webpack-bundle-analyzer dist/stats.json",
    "CODE_SPLITTING_EXAMPLE": "const LazyComponent = lazy(() => import('./LazyComponent'));",
    "LAZY_LOADING_EXAMPLE": "loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule)",
    "MEMOIZATION_EXAMPLE": "readonly memoizedValue = computed(() => this.expensiveCalculation());",
    "DB_CONNECTIONS_COMMAND": "SELECT COUNT(*) FROM sys.dm_exec_connections",
    "MONITOR_POOL_COMMAND": "dotnet counters monitor System.Data.SqlClient",
    "CONNECTION_POOL_CONFIG": "\"ConnectionStrings\": {\n  \"DefaultConnection\": \"...;Max Pool Size=200;\"\n}",
    "CONNECTION_LEAK_FIX": "using var connection = new SqlConnection(connectionString);\n// Connection automatically disposed",
    "ORPHANED_RECORDS_QUERY": "SELECT * FROM ChildTable WHERE ParentId NOT IN (SELECT Id FROM ParentTable)",
    "CLEANUP_ORPHANED_QUERY": "DELETE FROM ChildTable WHERE ParentId NOT IN (SELECT Id FROM ParentTable)",
    "TEST_ENDPOINT_COMMAND": "curl -w '%{time_total}' https://api.external.com/endpoint",
    "NETWORK_TEST_COMMAND": "ping -c 10 api.external.com",
    "RETRY_LOGIC_EXAMPLE": "services.AddHttpClient<ExternalService>()\n    .AddPolicyHandler(GetRetryPolicy());",
    "CIRCUIT_BREAKER_EXAMPLE": "Policy.HandleResult<HttpResponseMessage>(r => !r.IsSuccessStatusCode)\n    .CircuitBreakerAsync(3, TimeSpan.FromSeconds(30));",
    "TIMEOUT_CONFIG": "\"HttpClient\": {\n  \"Timeout\": 30\n}",
    "TEST_WEBHOOK_COMMAND": "curl -X POST https://your-app.com/webhook -d '{}'",
    "WEBHOOK_LOGS_COMMAND": "grep webhook logs/app.log | tail -50",
    "CONTAINER_LOGS_COMMAND": "docker logs container-name --tail 100",
    "CONTAINER_INSPECT_COMMAND": "docker inspect container-name",
    "RESOURCE_LIMITS_COMMAND": "docker stats container-name",
    "ENV_VAR_K8S_EXAMPLE": "env:\n  - name: DATABASE_URL\n    valueFrom:\n      secretKeyRef:\n        name: db-secret\n        key: url",
    "RESOURCE_CONFIG_EXAMPLE": "resources:\n  limits:\n    memory: \"512Mi\"\n    cpu: \"500m\"\n  requests:\n    memory: \"256Mi\"\n    cpu: \"250m\"",
    "TENANT_ISOLATION_CHECK": "// Ensure all queries include tenant filter\npublic async Task<T> GetByIdAsync(Guid id)\n{\n    return await _context.Set<T>()\n        .Where(e => e.OrganizationId == _currentUser.OrganizationId && e.Id == id)\n        .FirstOrDefaultAsync();\n}",
    "TENANT_DATA_DISTRIBUTION_QUERY": "SELECT OrganizationId, COUNT(*) as RecordCount\nFROM YourTable\nGROUP BY OrganizationId\nORDER BY RecordCount DESC",
    "SLOW_QUERIES_BY_TENANT": "SELECT OrganizationId, query_text, total_elapsed_time\nFROM sys.dm_exec_query_stats\nJOIN sys.dm_exec_sql_text\nORDER BY total_elapsed_time DESC",
    "ERROR_LOG_QUERY": "grep -E 'ERROR|FATAL' logs/app.log | tail -100",
    "USER_JOURNEY_QUERY": "grep 'userId=12345' logs/app.log",
    "PERF_LOG_QUERY": "grep 'duration' logs/app.log | awk '{print $NF}' | sort -n | tail -20",
    "SYSTEM_STATUS_COMMAND": "systemctl status vineyard-api vineyard-web",
    "RESTART_SERVICES_COMMAND": "systemctl restart vineyard-api vineyard-web",
    "DB_BACKUP_LOCATION": "/backups/database/",
    "FILE_BACKUP_LOCATION": "/backups/files/",
    "CONFIG_BACKUP_LOCATION": "/backups/configs/",
    "RECOVERY_STEPS": "# 1. Stop services\nsystemctl stop vineyard-api\n# 2. Restore database\nsqlcmd -S localhost -U sa -i backup.sql\n# 3. Restart services\nsystemctl start vineyard-api",
    "HEALTH_TOOLS": "dotnet-counters\ndotnet-trace\ndotnet-dump",
    "PERF_TOOLS": "PerfView\nBenchmarkDotNet\nApplication Insights",
    "LOG_TOOLS": "Seq\nSerilog\nElmah",
    "DB_TOOLS": "SQL Server Management Studio\nAzure Data Studio\nEntity Framework Power Tools",
    "HEALTH_CHECK_SCRIPT": "#!/bin/bash\ncurl -f http://localhost:7028/health || exit 1\necho 'API is healthy'",
    "DIAGNOSE_SCRIPT": "#!/bin/bash\necho 'Checking services...'\nsystemctl status vineyard-api\necho 'Checking database...'\nsqlcmd -S localhost -Q 'SELECT 1'\necho 'Checking logs...'\ntail -20 /var/log/vineyard/app.log",
    "COLLECT_DIAGNOSTICS_COMMAND": "./collect-diagnostics.sh > diagnostics-$(date +%Y%m%d-%H%M%S).txt",
    "SLACK_CHANNEL": "#vineyard-support",
    "ISSUE_TRACKER_URL": "https://github.com/org/vineyard/issues",
    "ON_CALL_PROCESS": "PagerDuty rotation",
    "EMERGENCY_CONTACT": "+1-555-ONCALL",
    "SYSTEM_DASHBOARD_URL": "https://monitoring.vineyard.com/system",
    "API_DASHBOARD_URL": "https://monitoring.vineyard.com/api",
    "ERROR_DASHBOARD_URL": "https://monitoring.vineyard.com/errors",
    "TENANT_DASHBOARD_URL": "https://monitoring.vineyard.com/tenants"
  }
}